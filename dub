#!/bin/bash

#  +---------------------------------------------------------------------------+
#  |                                    dub                                    |
#  | - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |
#  |                            ("Disk Usage Bars")                            |
#  |                                                                           |
#  | A program to show the number of files/directories in a given directory,   |
#  | and how much memory each one takes.                                       |
#  |                                                                           |
#  | The results of a "du" command are displayed by drawing bars for each      |
#  | item in the directory, proportional to each item's memory.                |
#  +---------------------------------------------------------------------------+
#                                                                             
#                                  CREATED BY:    Kevin Klinkel
#                                  UPDATED:       May 7, 2017
#
#
#-------------------------------------------------------------------------------
# Copyright (c) 2017 Kevin Klinkel, https://github.com/doorbell88/dub
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
################################## CONSTANTS ###################################
#-------------------------------------------------------------------------------
# DIMENSIONS

# width of terminal window
WIDTH=$(tput cols)

# formatting dimensions (practical constraints)
scale=1                 # give scale an initial value
BUFFER=2                # extra space between fields
NUMBER_WIDTH_min=3      # numbering list on the left
ITEM_WIDTH_min=4        # item (eg. filename / directory)
BAR_WIDTH_min=4         # colored bar to display disk usage
FILESIZE_WIDTH_min=4    # file size (KB) on the right

# calculate max widths for bar and item 
BUFFER_TOTAL=$((3*BUFFER))
ITEM_WIDTH_max=$(( WIDTH - NUMBER_WIDTH_min - BAR_WIDTH_min - FILESIZE_WIDTH_min - BUFFER_TOTAL ))
BAR_WIDTH_max=$(( WIDTH - NUMBER_WIDTH_min - ITEM_WIDTH_min - FILESIZE_WIDTH_min - BUFFER_TOTAL ))

#-------------------------------------------------------------------------------
# COLORS (for display bars)
RED=1
GREEN=2
YELLOW=3
BLUE=4
MAGENTA=5
CYAN=6
WHITE=7
GRAY=8

# Color order (for display bars)
#
# --> YOU CAN EDIT THESE TO CUSTOMIZE WHAT COLORS (AND IN WHAT ORDER) YOU WANT
#     THE BARS TO DISPLAY IN
#
C1=$YELLOW
C2=$GREEN
C3=$BLUE
C4=$CYAN
C5=
C6=
C7=
C8=

# give initial value for $color as empty string
color=""


#-------------------------------------------------------------------------------
################################## FUNCTIONS ###################################
#-------------------------------------------------------------------------------
                                  
#--------------------------------- User Input ----------------------------------
# show help message
usage() {
    dub=$(basename $0)
    echo
    echo "-------------------- $dub ----------------------"
    echo "Usage:"
    echo "  $dub"
    echo "  $dub [-h | --help]"
    echo "  $dub [<directory>]"
    echo
    echo "Options:"
    echo "  -h --help    Show this message."
    echo "  <directory>  Show the contents of <directory>"
    echo
}

# Process arguments to determine which directory to display
get_directory() {
    if [ -d "$*" ]; then
        directory="$*"
        cd "$directory"
    else
        echo "  -->  Directory does not exist."
        #usage
        exit 1
    fi
}

# Add option to run script on a different directory
get_cmd_line_args() {
    # if no arguments are given, use current directory
    if [ "$1" = "" ]; then
        directory=$PWD
        cd "$directory"
        return
    fi

    # process any command line arguments given
    while [ -n "$1" ]; do
        case $1 in 
            -h | --help )   usage
                            exit
                            ;;
            * )             get_directory "$*"
        esac
        shift
    done
}


#----------------------------- Fitting to Screen -------------------------------
# get disk usage
get_directory_data() {
    # make sure directory is not empty
    if [ -z "$(ls | head -n1 | awk '{print 1}')" ]; then
        echo "  --->  Directory is empty."
        exit 1

    # get disk usage and contents of directory
    else
        du_raw=$(du -kd0 *)
        ls_raw=$(ls -F1)
    fi
}

find_longest_number(){
    # find length of longes item in (#) column
    ls_list=$ls_raw
    number_of_bars=$(echo "${ls_list}" | wc -l | grep -o -E '[0-9]+')
    max_number_length=${#number_of_bars}
    NUMBER_WIDTH=$max_number_length
    if [ $NUMBER_WIDTH -lt $NUMBER_WIDTH_min ]; then
        NUMBER_WIDTH=$NUMBER_WIDTH_min
    fi
}

find_longest_item() {
    # find length of longest item (filename/directory) to write
    item_list=$ls_raw
    max_item_length=$(for line in "${item_list}"; do echo -n "$line" \
                      | awk '{print length($0)}'; done \
                      | sort -nr | head -n1)
}

find_longest_bar() {
    # find length of longest bar to draw
    du_list=$du_raw
    max_bar=$(echo "${du_list}" | awk '{print $1}' | sort -nr | head -n1)
    number_of_bars=$(echo "${du_list}" | wc -l | grep -o -E '[0-9]+')
}

find_longest_filesize() {
    # find length of longest filesize (KB) to write
    du_list=$du_raw
    FILESIZE_WIDTH=$(for line in "${du_list}"; do echo -n "$line" \
                     | awk '{print length($1)}'; done \
                     | sort -nr | head -n1)
    if [ $FILESIZE_WIDTH -lt $FILESIZE_WIDTH_min ]; then
        FILESIZE_WIDTH=$FILESIZE_WIDTH_min
    fi
}

scale_items() {
    # determine space to write filenames
    # (this has priority, and should be performed before scaling bars)
    if [ $max_item_length -gt $ITEM_WIDTH_max ]; then     # Too big
        ITEM_WIDTH=$ITEM_WIDTH_max
    elif [ $max_item_length -lt $ITEM_WIDTH_min ]; then   # Too small
        ITEM_WIDTH=$ITEM_WIDTH_min
    else                                                  # Just right
        ITEM_WIDTH=$max_item_length
    fi

    # Ensure ITEM_WIDTH is at least as big as ITEM_WIDTH_min
    if [ $ITEM_WIDTH -lt $ITEM_WIDTH_min ]; then
        ITEM_WIDTH=$ITEM_WIDTH_min
    fi
}

scale_bars() {
    # if bars need to be scaled back, scale them
    if [ $max_bar -gt $BAR_WIDTH_max ]; then
        BAR_WIDTH=$(( WIDTH - NUMBER_WIDTH - ITEM_WIDTH - FILESIZE_WIDTH - BUFFER_TOTAL ))

        # Ensure BAR_WIDTH is at least as big as BAR_WIDTH_min
        # If it's not, ITEM_WIDTH will have to be resized
        if [ $BAR_WIDTH -lt $BAR_WIDTH_min ]; then
            BAR_WIDTH=$BAR_WIDTH_min
            ITEM_WIDTH=$(( WIDTH - NUMBER_WIDTH - BAR_WIDTH - FILESIZE_WIDTH - BUFFER_TOTAL ))
        fi

        scale=$(( max_bar / BAR_WIDTH ))

        # avoid dividing by zero
        if [ $scale -lt 1 ]; then
            scale=1
        fi
        
        # Check bar width after scaling, and make sure it doesn't spill over
        BW_check=$(( max_bar / scale ))
        if [ $BW_check -gt $BAR_WIDTH ]; then
            scale=$((scale+1))
        fi
        BAR_WIDTH=$((max_bar / scale))

    # if bars are very small naturally, make the BAR_WIDTH small
    elif [ $max_bar -le $BAR_WIDTH_min ]; then
        BAR_WIDTH=$BAR_WIDTH_min
        scale=1
    else
        BAR_WIDTH=$max_bar
        scale=1
    fi

    # Ensure BAR_WIDTH is at least as big as BAR_WIDTH_min
    if [ $BAR_WIDTH -lt $BAR_WIDTH_min ]; then
        BAR_WIDTH=$BAR_WIDTH_min
    fi
}

fit_to_screen() {
    # find length of longest filesize and number, so scaling of everything else works out
    find_longest_number
    find_longest_filesize

    # if terminal is super small, make spaces smaller
    STAGE=$(( NUMBER_WIDTH + ITEM_WIDTH_min + BAR_WIDTH_min + FILESIZE_WIDTH + BUFFER_TOTAL ))
    if [ $WIDTH -lt $STAGE ]; then
        BUFFER=1
        STAGE=$(( NUMBER_WIDTH + ITEM_WIDTH_min + BAR_WIDTH_min + FILESIZE_WIDTH + BUFFER_TOTAL ))
        if [ $WIDTH -lt $STAGE ]; then
            tput setaf 1
            echo -e "\nTerminal size too small to display.\n"
            tput sgr0
            exit 1
        fi
    fi

    find_longest_item    # file length of longest filename / directory name
    find_longest_bar     # find largest file / directory (KB)
    scale_items          # print filenames gets priority, so this is done first
    scale_bars           # scale the bars after filenames have their space
}


#------------------------------ Printing Fields --------------------------------
print_separator() {
    STAGE_WIDTH=$(( NUMBER_WIDTH + ITEM_WIDTH + BAR_WIDTH + FILESIZE_WIDTH + BUFFER_TOTAL ))
    printf "%0.s-" $(seq 1 $STAGE_WIDTH)
    echo
}

write_buffer() {
    FORMAT="%-${BUFFER}.${BUFFER}s" 
    ARGUMENTS=""
    printf "${FORMAT}" "${ARGUMENTS}"
}

write_number() {
    FORMAT="%-${NUMBER_WIDTH}.${NUMBER_WIDTH}s" 
    ARGUMENTS="$1"
    printf "${FORMAT}" "${ARGUMENTS}"
    write_buffer
}

write_item() {
    item_string="${@}"
    item_length=${#item_string}

    # shorten item string, if necessary
    if [ $item_length -gt $ITEM_WIDTH ] && \
       [ $item_length -gt 10 ] && \
       [ $ITEM_WIDTH -gt 9 ]; then
        start=$((ITEM_WIDTH-8))
        end="(-4)"
        short_string="${item_string:0:$start}(..)${item_string:$end}"
        item_string="$short_string"
    fi

    FORMAT="%-${ITEM_WIDTH}.${ITEM_WIDTH}s" 
    ARGUMENTS=$item_string
    printf "${FORMAT}" "${ARGUMENTS}"
    write_buffer
}

write_SIZE() {
    FORMAT="%-${BAR_WIDTH}.${BAR_WIDTH}s" 
    ARGUMENTS="$1"
    printf "${FORMAT}" "${ARGUMENTS}"
    write_buffer
}

draw_bar() {
    max_bar_scaled=$((max_bar / scale))
    current_bar_scaled=$((current_bar_size / scale))

    # set bar color
    tput setab $color

    # if the current item is empty, draw blank
    if [ $current_bar_size = 0 ]; then
        tput sgr0   # return color to normal
    fi

    # if the current bar != 0 but gets scaled to 0 --> set it to 1 so it shows
    if [ $current_bar_scaled = 0 ]; then
        current_bar_scaled=1
    fi

    #calculate the empty space to the right of the bar
    current_bar_shadow=$((max_bar_scaled - current_bar_scaled))

    # draw the bar
    FORMAT="%-${current_bar_scaled}.${current_bar_scaled}s" 
    ARGUMENTS=""
    printf "${FORMAT}" "${ARGUMENTS}"

    # draw bar shadow
    tput sgr0       # return color to normal
    FORMAT="%-${current_bar_shadow}.${current_bar_shadow}s" 
    ARGUMENTS=""
    printf "${FORMAT}" "${ARGUMENTS}"

    # add a buffer space
    write_buffer
}

write_size() {
    FORMAT="%-.${FILESIZE_WIDTH}s" 
    ARGUMENTS=$1
    printf "${FORMAT}" "${ARGUMENTS}"
}


#------------------------------------ Main -------------------------------------
print_top_label_bar() {
    write_number "(#)"
    write_item "ITEM"
    write_SIZE "SIZE"
    write_size "(KB)"
}

next_color() {
    case "$color" in 
        "$C1" )     color=$C2
                    ;;
        "$C2" )     color=$C3
                    ;;
        "$C3" )     color=$C4
                    ;;
        "$C4" )     color=$C5
                    ;;
        "$C5" )     color=$C6
                    ;;
        "$C6" )     color=$C7
                    ;;
        "$C7" )     color=$C8
                    ;;
        "$C8" )     color=$C1
                    ;;
    esac

    # return to color 1 if color is an empty string (at end of list)
    if [ "$color" = "" ]; then
        color="$C1"
    fi
}

print_directory_contents() {
    #list of contents in directory and estimated disk usage
    du_list=$du_raw
    items=$ls_raw

    # separate numbers (disk usage) and strings (content names)
    bar_sizes=$(for line in "${du_list}"; do echo -n "$line" | awk '{print $1}'; done)

    # MAKE TOP LABEL BAR
    # print the directory searched
    echo -ne "\n$( cd $directory 2>/dev/null | pwd )"
    # --------------------------------------------------
    # print a top line for separation
    echo
    print_separator
    print_top_label_bar
    echo
    print_separator
    # --------------------------------------------------

    # loop through directories and print results
    i=1
    while [ $i -le $number_of_bars ]; do

        # read top line of lists
        current_bar_size=$(echo -e "$bar_sizes" | head -n1)
        current_item=$(echo -e "$items" | head -n1)

        # delete top line of lists
        bar_sizes=$(echo -e "$bar_sizes" | sed 1d)
        items=$(echo -e "$items" | sed 1d)

        # use colors 1-7
        color=$(( (i%6) + 1 ))

        # get next color in color progression (defined in beginning of script)
        #next_color

        # write all the fields in the current line
        write_number "$i"                   # Number entries
        write_item "$current_item"          # write filename or directory name
        draw_bar                            # draw colored bar
        write_size "$current_bar_size"      #print estimated size (from $(du))
        echo                                #next line

        i=$((i+1))

    done

    # print a bottom line for separation
    print_separator
}


#-------------------------------------------------------------------------------
##################################### MAIN #####################################
#-------------------------------------------------------------------------------

# process command line arguments
get_cmd_line_args "$*"

# let user know it is checking (while the user waits)
echo -e "\n...\nchecking disk space in $( cd $directory 2>/dev/null | pwd )\n..."

# get disk usage info and scale to terminal
get_directory_data
fit_to_screen

# print bars, once ready with all the information
print_directory_contents
