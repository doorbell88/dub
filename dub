#!/bin/bash

# A Program to show the number of files/directories in a given directory,
# and how much memory each one takes


################################## CONSTANTS ###################################
#-------------------------------------------------------------------------------
# width of terminal window
WIDTH=$(tput cols)

# give scale an initial value
scale=1

# extra space between fields
BUFFER=2
BUFFER_TOTAL=$((3*BUFFER))

# numbering list on the left
NUMBER_WIDTH=4

# file size (KB) on the right
FILESIZE_WIDTH_min=5
FILESIZE_WIDTH=10

# name of file/directory
ITEM_WIDTH_min=4
ITEM_WIDTH=20
ITEM_WIDTH_max=$(( WIDTH - NUMBER_WIDTH - BAR_WIDTH_min - FILESIZE_WIDTH - BUFFER_TOTAL ))

# bar that is drawn
BAR_WIDTH_min=4
BAR_WIDTH=25
BAR_WIDTH_max=$(( WIDTH - NUMBER_WIDTH - ITEM_WIDTH_min - FILESIZE_WIDTH - BUFFER_TOTAL ))


################################## FUNCTIONS ###################################
#-------------------------------------------------------------------------------

# show help message
usage() {
    dub=$(basename $0)
    echo
    echo "-------------------- $dub ----------------------"
    echo "Usage:"
    echo "  $dub"
    echo "  $dub [-h | --help]"
    echo "  $dub [<directory>]"
    echo
    echo "Options:"
    echo "  -h --help    Show this message."
    echo "  <directory>  Show the contents of <directory>"
    echo
}

# Process arguments to determine which directory to display
get_directory() {
    if [ -d "$*" ]; then
        directory="$*"
        cd "$directory"
    else
        echo "  -->  Directory does not exist."
        #usage
        exit 1
    fi
}

# Add option to run script on a different directory
get_cmd_line_args() {
    # if no arguments are given, use current directory
    if [ "$1" = "" ]; then
        directory=$PWD
        cd "$directory"
        return
    fi

    # process any command line arguments given
    while [ -n "$1" ]; do
        case $1 in 
            -h | --help )   usage
                            exit
                            ;;
            * )             get_directory "$*"
        esac
        shift
    done
}


#-------------------------------------------------------------------------------
# get disk usage
get_du() {
    # make sure directory is not empty
    if [ -z "$(ls | head -n1 | awk '{print 1}')" ]; then
        echo "  --->  Directory is empty."
        exit 1

    # get disk usage and contents of directory
    else
        du_raw=$(du -kd0 *)
        ls_raw=$(ls -F1)
    fi
}

find_longest_item() {
    # find length of longest item (filename/directory) to write
    item_list=$ls_raw
    max_item_length=$(for line in "${item_list}"; do echo -n "$line" \
                      | awk '{print length($0)}'; done \
                      | sort -nr | head -n1)
}

find_longest_bar() {
    # find length of longest bar to draw
    du_list=$du_raw
    max_bar=$(echo "${du_list}" | awk '{print $1}' | sort -nr | head -n1)
    number_of_bars=$(echo "${du_list}" | wc -l | grep -o -E '[0-9]+')
}

find_longest_filesize() {
    # find length of longest filesize (KB) to write
    du_list=$du_raw
    FILESIZE_WIDTH=$(for line in "${du_list}"; do echo -n "$line" \
                     | awk '{print length($1)}'; done \
                     | sort -nr | head -n1)
    FILESIZE_WIDTH=$((FILESIZE_WIDTH+2))
    if [ $FILESIZE_WIDTH -lt $FILESIZE_WIDTH_min ]; then
        FILESIZE_WIDTH=$FILESIZE_WIDTH_min
    fi
}

scale_items() {
    # determine space to write filenames
    # (this has priority, and should be performed before scaling bars)
    if [ $max_item_length -gt $ITEM_WIDTH_max ]; then     # Too big
        ITEM_WIDTH=$ITEM_WIDTH_max
    elif [ $max_item_length -lt $ITEM_WIDTH_min ]; then   # Too small
        ITEM_WIDTH=$ITEM_WIDTH_min
    else                                                  # Just right
        ITEM_WIDTH=$max_item_length
    fi

    # Ensure ITEM_WIDTH is at least as big as ITEM_WIDTH_min
    if [ $ITEM_WIDTH -lt $ITEM_WIDTH_min ]; then
        ITEM_WIDTH=$ITEM_WIDTH_min
    fi
}

scale_bars() {
    # if bars need to be scaled back, scale them
    if [ $max_bar -gt $BAR_WIDTH_max ]; then
        BAR_WIDTH=$(( WIDTH - NUMBER_WIDTH - ITEM_WIDTH - FILESIZE_WIDTH - BUFFER_TOTAL ))
        scale=$(( max_bar / BAR_WIDTH ))

        # avoid dividing by zero
        if [ $scale -lt 1 ]; then
            scale=1
        fi
        
        # Check bar width after scaling, and make sure it doesn't spill over
        BW_check=$(( max_bar / scale ))
        if [ $BW_check -gt $BAR_WIDTH ]; then
            scale=$((scale+1))
        fi
        BAR_WIDTH=$((max_bar / scale))

    # if bars are very small naturally, make the BAR_WIDTH small
    elif [ $max_bar -le $BAR_WIDTH ]; then
        BAR_WIDTH=$max_bar
        scale=1
    else
        BAR_WIDTH=$max_bar
        scale=1
    fi

    # Ensure BAR_WIDTH is at least as big as BAR_WIDTH_min
    if [ $BAR_WIDTH -lt $BAR_WIDTH_min ]; then
        BAR_WIDTH=$BAR_WIDTH_min
    fi
}

fit_to_screen() {
    # find length of longest filesize, so scaling of everything else works out
    find_longest_filesize

    # if terminal is super small, make spaces smaller
    STAGE=$(( NUMBER_WIDTH + ITEM_WIDTH_min + BAR_WIDTH_min + FILESIZE_WIDTH + BUFFER_TOTAL ))
    if [ $WIDTH -lt $STAGE ]; then
        NUMBER_WIDTH=3
        BUFFER=1
        STAGE=$(( NUMBER_WIDTH + ITEM_WIDTH_min + BAR_WIDTH_min + FILESIZE_WIDTH + BUFFER_TOTAL ))
        if [ $WIDTH -lt $STAGE ]; then
            tput setaf 1
            echo -e "\nTerminal size too small to display.\n"
            tput sgr0
            exit 1
        fi
    fi

    find_longest_item    # file length of longest filename / directory name
    find_longest_bar     # find largest file / directory (KB)
    scale_items          # print filenames gets priority, so this is done first
    scale_bars           # scale the bars after filenames have their space
}


#-------------------------------------------------------------------------------
print_separator() {
    STAGE_WIDTH=$(( NUMBER_WIDTH + ITEM_WIDTH + BAR_WIDTH + FILESIZE_WIDTH + BUFFER_TOTAL ))
    printf "%0.s-" $(seq 1 $STAGE_WIDTH)
    echo
}

print_top_label_bar() {
    write_number "(#)"
    write_item "ITEM"
    write_SIZE "SIZE"
    write_size "(KB)"
}

write_buffer() {
    FORMAT="%-${BUFFER}.${BUFFER}s" 
    ARGUMENTS=""
    printf "${FORMAT}" "${ARGUMENTS}"
}

write_number() {
    FORMAT="%-${NUMBER_WIDTH}.${NUMBER_WIDTH}s" 
    ARGUMENTS="$1"
    printf "${FORMAT}" "${ARGUMENTS}"
    write_buffer
}

write_item() {
    item_string="${@}"
    item_length=${#item_string}

    # shorten item string, if necessary
    if [ $item_length -gt $ITEM_WIDTH ] && \
       [ $item_length -gt 10 ] && \
       [ $ITEM_WIDTH -gt 9 ]; then
        start=$((ITEM_WIDTH-8))
        end="(-4)"
        short_string="${item_string:0:$start}(..)${item_string:$end}"
        item_string="$short_string"
    fi

    FORMAT="%-${ITEM_WIDTH}.${ITEM_WIDTH}s" 
    ARGUMENTS=$item_string
    printf "${FORMAT}" "${ARGUMENTS}"
    write_buffer
}

write_SIZE() {
    FORMAT="%-${BAR_WIDTH}.${BAR_WIDTH}s " 
    ARGUMENTS="$1"
    printf "${FORMAT}" "${ARGUMENTS}"
    write_buffer
}

draw_bar() {
    current_bar_scaled=$((current_bar_size / scale))
    max_bar_scaled=$((max_bar / scale))

    # set bar color (background color)
    tput setab $color

    # DRAW COLORED BAR
    # if the current directory is empty, draw blank
    if [ $current_bar_size = 0 ]; then
        tput sgr0   # return color to normal
    fi
    # draw the bar
    printf "%0.s " $(seq 0 $current_bar_scaled)
    tput sgr0       # return color to normal

    # add space for disk usage number at right
    printf "%$(( (max_bar_scaled - current_bar_scaled) ))s" ""

    # add a buffer space
    write_buffer
}

write_size() {
    FORMAT="%-.${FILESIZE_WIDTH}s" 
    ARGUMENTS=$1
    printf "${FORMAT}" "${ARGUMENTS}"
}


#-------------------------------------------------------------------------------
print_directory_contents() {
    #list of contents in directory and estimated disk usage
    contents=$du_raw
    items=$ls_raw

    # separate numbers (disk usage) and strings (content names)
    bar_sizes=$(for line in "${contents}"; do echo -n "$line" | awk '{print $1}'; done)

    # MAKE TOP LABEL BAR
    # print the directory searched
    echo -ne "\n$( cd $directory 2>/dev/null | pwd )"
    # --------------------------------------------------
    # print a top line for separation
    echo
    print_separator
    print_top_label_bar
    echo
    print_separator
    # --------------------------------------------------

    # loop through directories and print results
    i=1
    while [ $i -le $number_of_bars ]; do

        # read top line of lists
        current_bar_size=$(echo -e "$bar_sizes" | head -n1)
        current_item=$(echo -e "$items" | head -n1)

        # delete top line of lists
        bar_sizes=$(echo -e "$bar_sizes" | sed 1d)
        items=$(echo -e "$items" | sed 1d)

        # 8 and 9 are not colors... so this is a workaround to use colors 1-7
        color=$(( (i%7) + 1 ))

        # yellow, green, cyan, blue
        #color=$(( (i%4) + 2 ))
        #if [ $color = 5 ]; then
        #   color=6
        #fi

        write_number "$i"                   # Number entries
        write_item "$current_item"          # write filename or directory name
        draw_bar                            # draw colored bar
        write_size "$current_bar_size"      #print estimated size (from $(du))
        echo                                #next line

        i=$((i+1))

    done

    # print a bottom line for separation
    print_separator
}


##################################### MAIN #####################################
#-------------------------------------------------------------------------------

# process command line arguments
get_cmd_line_args "$*"

# let user know it is checking
# (in case it's in a heirearchy that will take a while to $(du))
echo -e "\n...\nchecking disk space in $( cd $directory 2>/dev/null | pwd )\n..."

# get disk usage info and scale to terminal
get_du
fit_to_screen

# print bars, once ready with all the information
print_directory_contents
